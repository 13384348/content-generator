const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// ‰ªéÂ§á‰ªΩÊï∞ÊçÆÂ∫ìÂØºÂá∫ÊâÄÊúâÈÅóÊºèÁöÑÊèêÁ§∫ËØç
const backupDbPath = 'D:/YUNYIN/content-generator-versions/version3-step-wizard/backup-20250927_215845/code/backend/database/content_generator.db';

async function exportAllPrompts() {
  const db = new sqlite3.Database(backupDbPath);

  try {
    console.log('üì¶ ‰ªéÂ§á‰ªΩÊï∞ÊçÆÂ∫ìÂØºÂá∫ÊâÄÊúâÊèêÁ§∫ËØç...');

    // ÂØºÂá∫Âü∫Á°ÄÊèêÁ§∫ËØçÔºàÈÄâÈ¢òÔºâ
    const prompts = await new Promise((resolve, reject) => {
      db.all('SELECT * FROM prompts ORDER BY id', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    // ÂØºÂá∫ÊñáÊ°àÊèêÁ§∫ËØç
    const contentPrompts = await new Promise((resolve, reject) => {
      db.all('SELECT * FROM content_prompts ORDER BY id', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    // ÂØºÂá∫ÂàÜÈïúËÑöÊú¨ÊèêÁ§∫ËØç
    const storyboardPrompts = await new Promise((resolve, reject) => {
      db.all('SELECT * FROM storyboard_prompts ORDER BY id', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    // ÂØºÂá∫‰∫åÂàõÊèêÁ§∫ËØç
    const explosivePrompts = await new Promise((resolve, reject) => {
      db.all('SELECT * FROM explosive_recreation_prompts ORDER BY id', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    const allData = {
      timestamp: new Date().toISOString(),
      prompts,
      contentPrompts,
      storyboardPrompts,
      explosivePrompts
    };

    // ‰øùÂ≠ò‰∏∫JSONÊñá‰ª∂
    fs.writeFileSync('all-missing-prompts.json', JSON.stringify(allData, null, 2));

    console.log('‚úÖ ÂØºÂá∫ÂÆåÊàêÔºÅ');
    console.log(`üìä Âü∫Á°ÄÊèêÁ§∫ËØçÔºàÈÄâÈ¢òÔºâ: ${prompts.length} Êù°`);
    console.log(`üìä ÊñáÊ°àÊèêÁ§∫ËØç: ${contentPrompts.length} Êù°`);
    console.log(`üìä ÂàÜÈïúËÑöÊú¨ÊèêÁ§∫ËØç: ${storyboardPrompts.length} Êù°`);
    console.log(`üìä ‰∫åÂàõÊèêÁ§∫ËØç: ${explosivePrompts.length} Êù°`);

    // ÊòæÁ§∫ËØ¶ÁªÜÂàóË°®
    console.log('\nüìã Âü∫Á°ÄÊèêÁ§∫ËØçÔºàÈÄâÈ¢òÔºâËØ¶ÁªÜÂàóË°®Ôºö');
    prompts.forEach((p, i) => console.log(`  ${i+1}. ${p.type}: ${p.name}`));

    console.log('\nüìã ÊñáÊ°àÊèêÁ§∫ËØçËØ¶ÁªÜÂàóË°®Ôºö');
    contentPrompts.forEach((p, i) => console.log(`  ${i+1}. ${p.type}: ${p.name}`));

    console.log('\nüìã ÂàÜÈïúËÑöÊú¨ÊèêÁ§∫ËØçËØ¶ÁªÜÂàóË°®Ôºö');
    storyboardPrompts.forEach((p, i) => console.log(`  ${i+1}. ${p.type}: ${p.name}`));

    console.log('\nüìã ‰∫åÂàõÊèêÁ§∫ËØçËØ¶ÁªÜÂàóË°®Ôºö');
    explosivePrompts.forEach((p, i) => {
      const preview = p.prompt.substring(0, 100) + '...';
      console.log(`  ${i+1}. ID ${p.id}: ${preview}`);
    });

  } catch (error) {
    console.error('‚ùå ÂØºÂá∫Â§±Ë¥•:', error);
  } finally {
    db.close();
  }
}

exportAllPrompts();